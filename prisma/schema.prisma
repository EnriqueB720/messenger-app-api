// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  email               String              @unique @db.VarChar(100)
  username            String              @unique @db.VarChar(100)
  phoneNumber         Int                 @unique @map("phone_number")
  passwordHash        String              @map("password_hash")
  fullName            String              @map("full_name") @db.VarChar(100)
  type                Role                @default(USER)
  messages            Message[]
  chatParticipants    ChatParticipant[]
  userMessageStatuses UserMessageStatus[]
  outSideContacts     Contact[]           @relation("contactUser")
  contacts            Contact[]           @relation("user")

  @@map("users")
}

model Contact {
  userId        Int     @map("user_id")
  contactUserId Int     @map("contact_user_id")
  fullName      String  @map("full_name") @db.VarChar(100)
  isFavorite    Boolean @default(false) @map("is_favorite")
  isBlocked     Boolean @default(false) @map("is_blocked")
  user          User    @relation("user", fields: [userId], references: [id])
  contactUser   User    @relation("contactUser", fields: [contactUserId], references: [id])

  @@id([contactUserId, userId])
  @@map("contacts")
}

model Chat {
  id           Int               @id @default(autoincrement())
  uuid         String            @unique @default(uuid())
  name         String            @map("chat_name") @db.VarChar(150)
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  isGroup      Boolean           @default(false) @map("is_group")
  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  chatId Int  @map("chat_id")
  userId Int  @map("user_id")
  chat   Chat @relation(fields: [chatId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id                Int                @id @default(autoincrement())
  uuid              String             @default(uuid())
  chatId            Int                @map("chat_id")
  senderId          Int                @map("sender_id")
  text              String             @map("message_text")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  replyMessageId    Int?               @map("reply_message_id")
  attachment        Attachment?
  userMessageStatus UserMessageStatus?
  chat              Chat               @relation(fields: [chatId], references: [id])
  sender            User               @relation(fields: [senderId], references: [id])
  replyMessage      Message?           @relation("replyMessage", fields: [replyMessageId], references: [id])
  replyMessages     Message[]          @relation("replyMessage")

  @@map("messages")
}

model UserMessageStatus {
  messageId  Int     @unique @map("message_id")
  userId     Int     @map("user_id")
  isRead     Boolean @default(false) @map("is_read")
  isReceived Boolean @default(false) @map("is_received")
  isFavorite Boolean @default(false) @map("is_favorite")
  user       User    @relation(fields: [userId], references: [id])
  message    Message @relation(fields: [messageId], references: [id])

  @@id([userId, messageId])
  @@map("user_message_statuses")
}

model Attachment {
  id        Int     @id @default(autoincrement())
  uuid      String  @unique @default(uuid())
  messageId Int     @unique @map("message_id")
  fileName  String  @map("file_name") @db.VarChar(255)
  fileType  String  @map("file_type") @db.VarChar(20)
  fileSize  Int     @map("file_size")
  fileUrl   String  @map("file_url")
  message   Message @relation(fields: [messageId], references: [id])

  @@map("attachments")
}

enum Role {
  USER
  ADMIN
}
