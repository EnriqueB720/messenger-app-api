# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Contact {
  userId: Float
  contactUserId: Float
  fullName: String
  isFavorite: Boolean
  isBlocked: Boolean
  contactUser: User
}

type UserMessageStatus {
  messageId: Float
  userId: Float
  isRead: Boolean
  isReceived: Boolean
  isFavorite: Boolean
  user: User
}

type Message {
  id: Float
  uuid: String
  chatId: Float
  senderId: Float
  text: String
  createdAt: DateTime
  updatedAt: DateTime
  replyMessageId: Float
  userMessageStatuses: [UserMessageStatus!]
  sender: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Float
  uuid: String
  email: String
  phoneNumber: Int
  type: Role
  language: Language
  fullName: String
  username: String
  contacts: [Contact!]
  messages: [Message!]
}

enum Role {
  USER
  ADMIN
}

enum Language {
  SPANISH
  ENGLISH
}

type ChatParticipant {
  chatId: Float
  userId: Float
  user: User
}

type Chat {
  id: Float
  uuid: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  isGroup: Boolean
  messages: [Message!]
  participants: [ChatParticipant!]
}

type Query {
  user(where: UserWhereUniqueInput!): User!
  contacts(skip: Int, take: Int, cursor: ContactWhereUniqueInput, orderBy: ContactOrderByInput, where: ContactWhereInput): [Contact!]!
  chat(where: ChatWhereUniqueInput!): Chat!
  chats(skip: Int, take: Int, cursor: ChatWhereUniqueInput, orderBy: ChatOrderByInput, where: ChatWhereInput): [Chat!]!
  filteredChats(skip: Int, take: Int, cursor: ChatWhereUniqueInput, orderBy: ChatOrderByInput, where: ChatWhereInput): [Chat!]!
  messages(skip: Int, take: Int, cursor: MessageWhereUniqueInput, orderBy: MessageOrderByInput, where: MessageWhereInput): [Message!]!
  ChatParticipant(where: ChatParticipantWhereUniqueInput!): [ChatParticipant!]!
  userMessageStatus(skip: Int, take: Int, cursor: UserMessageStatusWhereUniqueInput, orderBy: UserMessageStatusOrderByInput, where: UserMessageStatusWhereInput): [UserMessageStatus!]!
}

input UserWhereUniqueInput {
  id: Int
  uuid: String
  username: String
  phoneNumber: Int
  email: String
}

input ContactWhereUniqueInput {
  userId: Int
  contactUserId: Int
}

input ContactOrderByInput {
  fullName: OrderByArg
  isFavorite: OrderByArg
  isBlocked: OrderByArg
}

enum OrderByArg {
  ASC
  DESC
}

input ContactWhereInput {
  userId: Int
  contactUserId: Int
  fullName: String
  isFavorite: Boolean
  isBlocked: Boolean
}

input ChatWhereUniqueInput {
  id: Int
  uuid: String
}

input ChatOrderByInput {
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
}

input ChatWhereInput {
  id: Int
  uuid: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  isGroup: Boolean
  userId: Int
  AND: [ChatWhereInput!]
  participants: ChatParticipantListRelationFilter
}

input ChatParticipantListRelationFilter {
  some: ChatParticipantWhereInput
  every: ChatParticipantWhereInput
  none: ChatParticipantWhereInput
}

input ChatParticipantWhereInput {
  userId: Int
  contactUserId: Int
}

input MessageWhereUniqueInput {
  id: Int
  uuid: String
  senderId: Int
  chatId: Int
  replyMessageId: Int
}

input MessageOrderByInput {
  createdAt: OrderByArg
}

input MessageWhereInput {
  id: Int
  uuid: String
  senderId: Int
  chatId: Int
  text: String
  createdAt: DateTime
  updatedAt: DateTime
  replyMessageId: Int
}

input ChatParticipantWhereUniqueInput {
  chatId: Int
  userId: Int
}

input UserMessageStatusWhereUniqueInput {
  messageId: Int
  userId: String
}

input UserMessageStatusOrderByInput {
  isRead: OrderByArg
}

input UserMessageStatusWhereInput {
  messageId: Int
  userId: Int
  isRead: Boolean
  isFavorite: Boolean
  isReceived: Boolean
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createContact(data: ContactCreateInput!): Contact!
  createGroupChat(data: ChatCreateInput!): Chat!
  createDirectMessage(data: DirectMessageCreateInput!): Message!
  createGroupMessage(data: GroupMessageCreateInput!): Message!
  createNewGroupParticipant(data: ChatParticipantCreateInput!): ChatParticipant!
}

input UserCreateInput {
  type: Role!
  email: String!
  phoneNumber: Int!
  username: String!
  passwordHash: String!
  fullName: String!
}

input ContactCreateInput {
  firstName: String!
  lastName: String!
  phoneNumber: Int!
  user: UserCreateNestedOneWithoutContactsInput!
}

input UserCreateNestedOneWithoutContactsInput {
  connect: UserWhereUniqueInput!
}

input ChatCreateInput {
  name: String!
  isGroup: Boolean
  participantIds: [ChatParticipantCreateManyChatInput!]
}

input ChatParticipantCreateManyChatInput {
  userId: Int
}

input DirectMessageCreateInput {
  text: String!
  contact: ContactWhereUniqueInput!
  sender: UserCreateNestedOneWithoutMessagesInput!
}

input UserCreateNestedOneWithoutMessagesInput {
  connect: UserWhereUniqueInput!
}

input GroupMessageCreateInput {
  text: String!
  chat: ChatCreateNestedOneWithoutMessagesInput!
  sender: UserCreateNestedOneWithoutMessagesInput!
}

input ChatCreateNestedOneWithoutMessagesInput {
  connect: ChatWhereUniqueInput!
}

input ChatParticipantCreateInput {
  chat: ChatCreateNestedOneWithoutParticipantsInput!
  user: UserCreateNestedOneWithoutChatParticipantsInput!
}

input ChatCreateNestedOneWithoutParticipantsInput {
  connect: ChatWhereUniqueInput!
}

input UserCreateNestedOneWithoutChatParticipantsInput {
  connect: UserWhereUniqueInput!
}